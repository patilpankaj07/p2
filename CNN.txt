import tensorflow as ts
from tensorflow.keras import models, layers
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten, Dropout, Conv2D, MaxPooling2D
import matplotlib.pyplot as plt
import numpy as np

mnist=ts.keras.datasets.mnist
(x_train,y_train),(x_test,y_test)=mnist.load_data()
# x_train=x_train.reshape(x_train.shape[0],28,28,1)
# x_test=x_test.reshape(x_test.shape[0],28,28,1)
# x_train=x_train.astype('float32')
# x_test=x_test.astype('float32')
x_train=x_train/255
x_test=x_test/255

model = models.Sequential()
model.add(layers.Conv2D(28, (3, 3), input_shape=(28, 28, 1)))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Flatten())
model.add(layers.Dense(200, activation='relu'))
model.add(layers.Dropout(0.3))
model.add(layers.Dense(10, activation='softmax'))
model.summary()

model.compile(optimizer="adam",
              loss="sparse_categorical_crossentropy",
              metrics=["accuracy"]
             )

h=model.fit(x_train,y_train,validation_data=(x_test,y_test),epochs=2)

test_loss,test_acc=model.evaluate(x_test,y_test)
print(test_loss)
print(test_acc)

img=x_train[7]
plt.imshow(np.squeeze(img),cmap='grey')
plt.show()
img=img.reshape(1,img.shape[0],img.shape[1],1)
pr=model.predict([img])
print(format(np.argmax(pr)))
